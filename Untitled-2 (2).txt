import numpy as np
import keras
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import Dense, Flatten, Embedding

# Define the text data and labels
texts = [
    "African Elephant",
    "Bengal Tiger",
    "Black Rhinoceros",
    "Chimpanzee",
    "Gorilla",
    "Orangutan",
    "Polar Bear",
    "Sea Turtle",
    "Snow Leopard",
    "Sumatran Elephant",
    "Western Gorilla",
    "Eastern Gorilla",
    "Pangolin",
    "Black Rhino",
    "Orangutan",
    "Polar Bear"
]
labels = [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0] # 0 for herbivore and 1 for carnivore

# Tokenize the text data
tokenizer = Tokenizer()
tokenizer.fit_on_texts(texts)
sequences = tokenizer.texts_to_sequences(texts)
word_index = tokenizer.word_index

# Pad the sequences to the same length
max_length = max([len(sequence) for sequence in sequences])
padded_sequences = pad_sequences(sequences, maxlen=max_length, padding='post')

# Split the data into training and test sets
training_data = padded_sequences[:int(len(padded_sequences) * 0.8)]
training_labels = labels[:int(len(labels) * 0.8)]
test_data = padded_sequences[int(len(padded_sequences) * 0.8):]
test_labels = labels[int(len(labels) * 0.8):]

# Define the model architecture
model = Sequential()
model.add(Embedding(input_dim=len(word_index) + 1, output_dim=100, input_length=max_length))
model.add(Flatten())
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(training_data, training_labels, epochs=10, batch_size=32)

# Evaluate the model on the test data
test_loss, test_accuracy = model.evaluate(test_data, test_labels)
print('Test Loss:', test_loss)
print('Test Accuracy:', test_accuracy)
